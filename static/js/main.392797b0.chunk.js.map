{"version":3,"sources":["TabBox.js","App.js","serviceWorker.js","index.js"],"names":["SimpleTabs","props","React","useState","value","setValue","rows","todoData","check","page","setPage","rowsPerPage","setRowsPerPage","emptyRows","Math","min","length","handleChangePage","event","newPage","handleChangeRowsPerPage","parseInt","target","showTable","data","status","Table","size","TableBody","array","stabilizedThis","map","el","index","sort","a","b","stableSort","slice","row","i","TableRow","hover","className","role","tabIndex","key","id","selected","TableCell","padding","BootstrapTooltip","title","Checkbox","checked","color","onChange","e","handleComplete","component","scope","task","align","ButtonGroup","disableElevation","variant","Button","onClick","editTask","deleteTask","style","height","colSpan","TablePagination","rowsPerPageOptions","count","onChangePage","onChangeRowsPerPage","AppBar","position","Tabs","newValue","aria-label","Tab","label","TabPanel","children","other","hidden","aria-labelledby","Box","p","Typography","useStylesBootstrap","makeStyles","theme","arrow","palette","common","black","tooltip","backgroundColor","classes","Tooltip","Transition","forwardRef","ref","Slide","direction","App","setState","confirmDialogOpen","TaskID","delete","filteredItems","state","filter","item","localStorage","setItem","JSON","stringify","confirmUpdateOpen","update","items","helpDialog","isBackup","parse","getItem","this","navigator","userAgent","vendor","window","opera","test","substr","document","getElementById","focus","preventDefault","text","todoArr","Date","now","push","temp","isChecked","Container","maxWidth","Paper","addToDo","bind","type","placeholder","aria-describedby","scrollButtons","Dialog","open","TransitionComponent","keepMounted","fullWidth","onClose","DialogTitle","DialogContent","dividers","DialogActions","class","noValidate","autoComplete","TextField","IconButton","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.392797b0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport Button from '@material-ui/core/Button';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nexport default function SimpleTabs(props) {\r\n    const [value, setValue] = React.useState(0);\r\n    const rows = props.todoData;\r\n    const check = props.check;\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n    const showTable=(data,status) =>{\r\n        return(\r\n            <>\r\n                <Table size='small'>\r\n                    <TableBody>\r\n                        {stableSort(data)\r\n                        .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                        .map((row, i) => {\r\n                            return (\r\n                                <TableRow\r\n                                    hover\r\n                                    className={(status==='all')?null:(status==='active' && row.status === 'active')?null:(status==='complete' && row.status === 'complete')?null:\"d-none\"}\r\n                                    role=\"checkbox\"\r\n                                    tabIndex={-1}\r\n                                    key={row.id}\r\n                                    size=\"medium\"\r\n                                    selected={(row.status === 'complete') ? true : false}\r\n                                >\r\n                                    <TableCell padding=\"checkbox\">\r\n                                        <BootstrapTooltip title={(row.status === 'complete') ? \"Remove Checkbox if Not Completed\" : \"Check this if Task Completed\"}>\r\n                                            <Checkbox \r\n                                                checked={(row.status === 'complete') ? true : false} \r\n                                                size=\"medium\"\r\n                                                color=\"secondary\"\r\n                                                onChange={(e)=>props.handleComplete(e.target.checked,i)}\r\n                                            />\r\n                                        </BootstrapTooltip>\r\n                                    </TableCell>\r\n                                    <TableCell component=\"th\" className=\"text-capitalize\" scope=\"row\" padding=\"none\">\r\n                                        {row.task}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"right\">\r\n                                        <ButtonGroup disableElevation variant=\"contained\" color=\"primary\">\r\n                                            <Button className=\"bg-secondary\" onClick={props.editTask(this,row.id,row.task)}>{check?<i className=\"fas fa-edit\"></i>:\"Edit\"}</Button>\r\n                                            <Button className=\"bg-danger\" onClick={props.deleteTask(this,row.id)}>{check?<i className=\"fas fa-trash\"></i>:\"Delete\"}</Button>\r\n                                        </ButtonGroup>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            );\r\n                        })}\r\n                        {emptyRows > 0 && (\r\n                            <TableRow style={{ height: 53 * emptyRows }}>\r\n                                <TableCell colSpan={6} />\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n                </Table>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 20]}\r\n                    component=\"div\"\r\n                    count={rows.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\">\r\n                <Tabs\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    className=\"bg-info\"\r\n                    size=\"small\"\r\n                    aria-label=\"simple tabs example\"\r\n                >\r\n                    <Tab tabIndex=\"0\" label={check ?\"All\":\"Show All Task\" } />\r\n                    <Tab tabIndex=\"0\" label={check ?\"Active\":\"Show Active Task\"} />\r\n                    <Tab tabIndex=\"0\" label={check ?\"Completed\":\"Show Completed Task\"} />\r\n                </Tabs>\r\n            </AppBar>\r\n            <TabPanel value={value} index={0}>\r\n                {   \r\n                    (props.todoData && props.todoData.length) ?\r\n                    showTable(props.todoData,'all')\r\n                    : \r\n                    <span className=\"display-4 text-info\">Welcome back!! Add your Task 👆🏻</span>\r\n                }\r\n            </TabPanel>\r\n            <TabPanel value={value} index={1}>\r\n                {   \r\n                    (props.todoData && props.todoData.length) ?\r\n                    showTable(props.todoData,'active')\r\n                    : \r\n                    <span className=\"display-4 text-info\">Hurray! No Task is remaining... 😎</span>\r\n                }\r\n            </TabPanel>\r\n            <TabPanel value={value} index={2}>\r\n                {   \r\n                    (props.todoData && props.todoData.length) ?\r\n                    showTable(props.todoData,'complete')\r\n                    : \r\n                    <span className=\"display-4 text-info\">Oops! It seems that no task has been completed yet 😟 </span>\r\n                }\r\n            </TabPanel>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction stableSort(array) {\r\n    const stabilizedThis = array.map((el, index) => [el, index]);\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = 1;\r\n        if (order !== 0) return order;\r\n        return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`simple-tabpanel-${index}`}\r\n            aria-labelledby={`simple-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired\r\n};\r\nconst useStylesBootstrap = makeStyles((theme) => ({\r\n    arrow: {\r\n      color: theme.palette.common.black,\r\n    },\r\n    tooltip: {\r\n      backgroundColor: theme.palette.common.black,\r\n      padding: \"20px\"\r\n    },\r\n}));\r\nfunction BootstrapTooltip(props) {\r\n    const classes = useStylesBootstrap();\r\n    return <Tooltip arrow classes={classes} {...props} />;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//----------------------------------------------------------------------END-------------------------------------\r\n\r\n// import React from 'react';\r\n// import './App.css';\r\n// import ListItems from './ListItems'\r\n// import { library } from '@fortawesome/fontawesome-svg-core'\r\n// import { faTrash } from '@fortawesome/free-solid-svg-icons'\r\n\r\n// library.add(faTrash)\r\n\r\n// class App extends React.Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//         this.state = {\r\n//             items: [],\r\n//             currentItem: {\r\n//                 id:'',\r\n//                 text: '',\r\n//                 key: ''\r\n//             },\r\n//             visibileItems: [],\r\n//             checkBoxStatus: false\r\n//         }\r\n//         this.addItem = this.addItem.bind(this);\r\n//         this.handleInput = this.handleInput.bind(this);\r\n//         this.deleteItem = this.deleteItem.bind(this);\r\n//         this.setUpdate = this.setUpdate.bind(this);\r\n//         this.handleComplete = this.handleComplete.bind(this);\r\n//     }\r\n//     addItem(e) {\r\n//         e.preventDefault();\r\n//         const newItem = this.state.currentItem;\r\n//         if (newItem.text !== \"\") {\r\n//             const items = [...this.state.items, newItem];\r\n//             this.setState({\r\n//                 items: items,\r\n//                 currentItem: {\r\n//                     id:Date.now(),\r\n//                     text: '',\r\n//                     key: ''\r\n//                 },\r\n//                 visibileItems:items\r\n//             })\r\n//         }\r\n//     }\r\n\r\n//     handleInput(e) {\r\n//         this.setState({\r\n//             currentItem: {\r\n//                 id:Date.now(),\r\n//                 text: e.target.value,\r\n//                 key: 'active'\r\n//             }\r\n//         })\r\n//     }\r\n\r\n//     deleteItem(key) {\r\n//         const filteredItems= this.state.items.filter((item,index) =>\r\n//             item.id!==key);\r\n//         this.setState({\r\n//             items: filteredItems,\r\n//             visibileItems:filteredItems\r\n//         })\r\n//         document.getElementById('show_all_task').focus();\r\n//         // document.getElementsByClassName(\"show_all_task\").focus();\r\n//     }\r\n\r\n//     handleComplete(key,index) {\r\n//         const items = this.state.items;\r\n//         items.map((item, i) => {\r\n//             if (i === index) {\r\n//                 (key) ? item.key = \"Completed\" : item.key = \"active\" ;\r\n//             }\r\n//             return null;\r\n//         })\r\n//         this.setState({\r\n//             items: items,\r\n//         })\r\n//     }\r\n\r\n//     setUpdate(text, key) {\r\n//         const items = this.state.items;\r\n//         items.map(item => {\r\n//             if (item.id === key) {\r\n//                 item.text = text;\r\n//             }\r\n//             return null;\r\n//         })\r\n//         this.setState({\r\n//             items: items,\r\n//         })\r\n//     }\r\n    \r\n//     showData(tabName) {\r\n//         const items = this.state.items;\r\n//         let temp = [];\r\n//         switch(tabName) {\r\n//             case \"Completed\":\r\n//                 items.map((item, i) => {\r\n//                     if (item.key === 'Completed') {\r\n//                         temp.push(item)\r\n//                     }\r\n//                     return null;\r\n//                 })\r\n//                 break;\r\n//             case \"active\":\r\n//                 items.map((item, i) => {\r\n//                     if (item.key === 'active') {\r\n//                         temp.push(item)\r\n//                     }\r\n//                     return null;\r\n//                 })\r\n//                 break;\r\n//             default:\r\n//                 temp= this.state.items;\r\n//         }\r\n//         this.setState({\r\n//             visibileItems: temp,  \r\n//         })\r\n//     }\r\n\r\n//     render() {\r\n//         return (\r\n//             <div className=\"App\">\r\n//                 <header>\r\n//                     <form id=\"to-do-form\" onSubmit={this.addItem}>\r\n//                         <input type=\"text\" placeholder=\"Enter task\" value={this.state.currentItem.text} onChange={this.handleInput}></input>\r\n//                         <button type=\"submit\">Add</button>\r\n//                     </form>\r\n//                     <button id=\"show_all_task\" className=\"show_all_task\" onClick={this.showData.bind(this, \"all\")}>Show All Task</button>\r\n//                     <button className=\"show_active_task\" onClick={this.showData.bind(this, \"active\")}>Show Active Task</button>\r\n//                     <button className=\"show_completed_task\" onClick={this.showData.bind(this, \"Completed\")}>Show Completed Task</button>\r\n//                     <p>{this.state.items.text}</p>\r\n//                     <ListItems handleComplete={this.handleComplete} isChecked={this.state.checkBoxStatus} items={this.state.visibileItems} deleteItem={this.deleteItem} setUpdate={this.setUpdate} />\r\n//                 </header>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n\r\n\r\n// export default App;\r\n\r\n\r\n\r\n\r\n// ------------------------\r\n// function ListItems(props){\r\n//     const items = props.items;\r\n//     const listItems = items.map((item,index) =>{\r\n//        return <div className=\"list\" key={index}>\r\n//         <p style={{verticalAlign:\"middle\"}}>\r\n//             <span style={{float:\"left\",position:\"relative\",display:\"inline-block\"}}>\r\n//                 <Checkbox\r\n//                     checked={(item.key === 'Completed') ? true : false}\r\n//                     size=\"medium\"\r\n//                     onChange={(e) => props.handleComplete(e.target.checked,index)}\r\n//                     inputProps={{ 'aria-label': 'primary checkbox' }}\r\n//                 />\r\n//             </span>\r\n//             {/* <input type=\"checkbox\" className=\"check_status\" id=\"check_status\" checked={false} onChange={(e) => props.handleComplete(e.target.checked,index)} /> */}\r\n//             <input type=\"text\" id={item.id} value={item.text} onChange={(e)=>{props.setUpdate(e.target.value,item.id)}}/>\r\n//             <span>\r\n//                 <FontAwesomeIcon className=\"faicons\" onClick={() => {props.deleteItem(item.id)}} icon=\"trash\" />\r\n//             </span>\r\n//         </p>\r\n//         </div>\r\n//     })\r\n//     return <div>\r\n//         <FlipMove duration={300} easing=\"ease-in-out\">\r\n//             {listItems}\r\n//         </FlipMove>\r\n    \r\n//     </div>;\r\n//   }\r\n\r\n//   export default ListItems;","import React, { Component } from 'react'\nimport {Container,Paper} from '@material-ui/core';\nimport TabBox from './TabBox';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nclass App extends Component {\n    constructor(props){\n        super(props);\n        this.state = ({\n            todoData:[],\n            confirmDialogOpen: false,\n            confirmUpdateOpen: false,\n            TaskID:'',\n            task:'',\n            helpDialog:true,\n            check:false,\n        })\n    }\n\n    componentWillMount (){\n        let isBackup = JSON.parse(localStorage.getItem('todoMaticData'));\n        if(isBackup && isBackup.length) {\n            this.setState({todoData:isBackup})\n        }\n        let check=false;\n        (function(a){if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera); \n        this.setState({check})\n    }\n\n    componentDidMount(){\n        document.getElementById('todoText').focus();\n    }\n\n    addToDo(e){\n        e.preventDefault();\n        let text = document.getElementById('todoText').value;\n        if (text !== \"\") {\n            let todoArr = {\n                task:text,\n                status:'active',\n                id:Date.now()\n            }\n            this.state.todoData.push(todoArr);\n            let temp = this.state.todoData;\n            this.setState({todoData: temp})\n            document.getElementById('todoText').value = \"\";\n            localStorage.setItem('todoMaticData', JSON.stringify(temp));\n        }\n    }\n\n    deleteTask =(id,e) => {\n        this.setState({\n            confirmDialogOpen:true,\n            TaskID:id\n        })\n    }\n\n    delete = () =>{\n        const filteredItems= this.state.todoData.filter((item,i)=> item.id!==this.state.TaskID);\n        this.setState({\n            todoData:filteredItems,\n            confirmDialogOpen:false\n        })\n        localStorage.setItem('todoMaticData', JSON.stringify(filteredItems));\n    }\n\n    editTask=(id,task,e)=>{\n        this.setState({\n            confirmUpdateOpen:true,\n            TaskID:id,\n            task\n        }) \n    }\n\n    update = ()=>{\n        const items = this.state.todoData;\n        items.map((item, i) => {\n            if (item.id === this.state.TaskID) {\n                item.task = this.state.task;\n            }\n            return null;\n        })\n        this.setState({\n            todoData: items,\n            confirmUpdateOpen:false\n        })\n        localStorage.setItem('todoMaticData', JSON.stringify(items));\n    }\n\n    handleComplete(isChecked,index) {\n        const items = this.state.todoData;\n        items.map((item, i) => {\n            if (i === index) {\n                (isChecked) ? item.status = \"complete\" : item.status = \"active\" ;\n            }\n            return null;\n        })\n        this.setState({\n            todoData: items,\n        })\n        localStorage.setItem('todoMaticData', JSON.stringify(items));\n    }\n\n    render() {\n        return (\n            <Container maxWidth=\"lg\">\n                <div className=\"help\" onClick={()=>{this.setState({helpDialog:true})}}><br/><br/><br/><br/></div>\n                <h1 className={(this.state.check)?\"text-danger logo display-4 text-center\":\"text-danger logo display-1 text-center\"}>ToDo Matic</h1>\n                <Paper className=\"p-4 mx-auto\">\n                    <div className=\"row\">\n                        <form className=\"input-group mb-3 form-group col-sm-12\" onClick={this.addToDo.bind(this)}> \n                            <input type=\"text\" className=\"form-control btn-lg\" id=\"todoText\" placeholder=\"What needs to be done?\" aria-label=\"What needs to be done?\" aria-describedby=\"basic-addon2\" />\n                            <div className=\"input-group-append w-50\">\n                                <button className=\"btn btn-outline-secondary bg-info text-light\" type=\"submit\">Add</button>\n                            </div>\n                        </form>\n                    </div>\n                <TabBox scrollButtons=\"desktop\" check={this.state.check} variant=\"scrollable\" todoData={this.state.todoData} deleteTask={(e,id)=>this.deleteTask.bind(e,id)} editTask={(e,id,task)=>this.editTask.bind(e,id,task)} handleComplete={(this.handleComplete.bind(this))} />\n                </Paper>\n                <Dialog\n                    open={this.state.confirmDialogOpen}\n                    TransitionComponent={Transition}\n                    keepMounted\n                    maxWidth=\"sm\"\n                    fullWidth={true}\n                    onClose={()=>this.setState({confirmDialogOpen:false})}\n                    aria-labelledby=\"alert-dialog-slide-title\"\n                    aria-describedby=\"alert-dialog-slide-description\"\n                >\n                    <DialogTitle className=\"text-dark\" id=\"alert-dialog-slide-title\">{\"Delete Alert!!\"}</DialogTitle>\n                    <DialogContent dividers>\n                        <p className=\"display-4\" id=\"alert-dialog-slide-description\">\n                            Are you sure ?\n                        </p>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button className=\"btn btn-outline-secondary bg-secondary text-light\" onClick={()=>this.setState({confirmDialogOpen:false})} color=\"primary\">\n                            No\n                        </Button>\n                        <Button className=\"btn btn-outline-secondary bg-danger text-light\"  onClick={()=>this.delete()} color=\"secondary\">\n                            YES\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n                <Dialog\n                    open={this.state.confirmUpdateOpen}\n                    TransitionComponent={Transition}\n                    keepMounted\n                    maxWidth=\"sm\"\n                    fullWidth={true}\n                    onClose={()=>this.setState({confirmUpdateOpen:false})}\n                    aria-labelledby=\"alert-dialog-slide-title\"\n                    aria-describedby=\"alert-dialog-slide-description\"\n                >\n                    <DialogTitle className=\"text-dark\" id=\"alert-dialog-slide-title\">{\"Edit Task\"}</DialogTitle>\n                    <DialogContent dividers>\n                        <div className=\"row\">\n                            <div class={(this.state.check)?\"col-12\":\"col-md-10\"}>\n                                <form noValidate autoComplete=\"off\">\n                                    <TextField id=\"editedTask\" label=\"Task\" variant=\"outlined\" value={this.state.task} onChange={(e)=>this.setState({task:e.target.value})} fullWidth={true} />\n                                </form>\n                            </div>\n                            {(!this.state.check)?\n                            <div class=\"col-md-2 bot editBot \"><br/><br/>\n                            </div>:null}\n                        </div>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button className=\"btn btn-outline-secondary bg-secondary text-light\" onClick={()=>this.setState({confirmUpdateOpen:false})} color=\"primary\">\n                            Cancel\n                        </Button>\n                        <Button className=\"btn btn-outline-secondary bg-danger text-light\"  onClick={()=>this.update()} color=\"secondary\">\n                            Update\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n                <Dialog\n                    open={this.state.confirmDialogOpen}\n                    TransitionComponent={Transition}\n                    keepMounted\n                    maxWidth=\"sm\"\n                    fullWidth={true}\n                    onClose={()=>this.setState({confirmDialogOpen:false})}\n                    aria-labelledby=\"alert-dialog-slide-title\"\n                    aria-describedby=\"alert-dialog-slide-description\"\n                >\n                    <DialogTitle className=\"text-dark\" id=\"alert-dialog-slide-title\">{\"Delete Alert!!\"}</DialogTitle>\n                    <DialogContent dividers>\n                        <p className=\"display-4\" id=\"alert-dialog-slide-description\">\n                            Are you sure ?\n                        </p>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button className=\"btn btn-outline-secondary bg-secondary text-light\" onClick={()=>this.setState({confirmDialogOpen:false})} color=\"primary\">\n                            No\n                        </Button>\n                        <Button className=\"btn btn-outline-secondary bg-danger text-light\"  onClick={()=>this.delete()} color=\"secondary\">\n                            YES\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n                <Dialog\n                    open={this.state.helpDialog}\n                    TransitionComponent={Transition}\n                    keepMounted\n                    maxWidth=\"sm\"\n                    fullWidth={true}\n                    onClose={()=>this.setState({helpDialog:false})}\n                    aria-labelledby=\"alert-dialog-slide-title\"\n                    aria-describedby=\"alert-dialog-slide-description\"\n                >\n                    <DialogContent dividers className=\"bg-img\">\n                        <div className=\"row relative\">\n                            <div class=\"\">\n                                <span className=\"logo display-4 text-danger col-15\">ToDoMatic</span>\n                            </div>\n                            <div class=\"right\" onClick={()=>this.setState({helpDialog:false})}>\n                                <IconButton aria-label=\"close\" className=\"text-danger\" >\n                                    <b>X</b>\n                                </IconButton>\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            <div class=\"col-md-7 col-sm-12\">\n                                <ul className=\"text-dark text-lg\">\n                                <li>Create your daily life ToDo.</li>\n                                <li>Add all ToDo, It will display in Table.</li>\n                                <li>Once your any task is completed from ToDo, Check that task row from Table.</li>\n                                <li>Work until you not completed all the Task.</li>\n                                <li>Note: Here 3 tabs are available to check your work progress (All / Active / Completed)</li>\n                            </ul>\n                            </div>\n                            <div class=\"col-md-5 col-sm-12 bot \"><br/><br/><br/><br/><br/><br/><br/>\n                            </div>\n                        </div>\n                    </DialogContent>\n                </Dialog>\n            </Container>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}